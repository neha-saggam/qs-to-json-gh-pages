{"version":3,"sources":["MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["MainComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","queryString","target","value","convertToJSON","json","queryStringToJson","state","react_default","a","createElement","Container","Row","Col","md","span","offset","InputGroup","className","Prepend","Text","id","FormControl","aria-label","aria-describedby","onChange","Button","variant","onClick","JSON","stringify","length","style","marginTop","Card","Body","React","Component","App","MainComponent_MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAYqBA,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,aAAe,SAAAC,GACbR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAT9BZ,EAYda,cAAgB,WACd,IAAMC,EAAOC,IAAkBf,EAAKgB,MAAMN,aAC1CV,EAAKS,SAAS,CAAEK,UAZhBd,EAAKgB,MAAQ,CACXN,YAAa,0BACbI,KAAM,IAJId,wEAkBZ,OACEiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1BR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,UAAU,QACpBV,EAAAC,EAAAC,cAACO,EAAA,EAAWE,QAAZ,KACEX,EAAAC,EAAAC,cAACO,EAAA,EAAWG,KAAZ,CAAiBC,GAAG,6BAApB,iBAIFb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,aAAW,cACXC,mBAAiB,4BACjBC,SAAU/B,KAAKI,aACfK,MAAOT,KAAKa,MAAMN,iBAK1BO,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1BR,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASlC,KAAKU,eAAxC,sBAGFyB,KAAKC,UAAUpC,KAAKa,MAAMF,KAAK0B,SACjCvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKoB,MAAO,CAACC,UAAW,OACpBzB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxBR,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACwB,EAAA,EAAKC,KAAN,KAAYN,KAAKC,UAAUpC,KAAKa,MAAMF,kBA/Cf+B,IAAMC,WCElCC,MAVf,WACE,OACE9B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cAChBV,EAAAC,EAAAC,cAAC6B,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ed0a03d6.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n  Button,\n  Card\n} from \"react-bootstrap\";\nimport queryStringToJson from \"qs-to-json\";\n\nexport default class MainComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      queryString: \"a.name=Nick&b.name=John\",\n      json: \"\"\n    };\n  }\n\n  handleChange = event => {\n    this.setState({ queryString: event.target.value });\n  };\n\n  convertToJSON = () => {\n    const json = queryStringToJson(this.state.queryString);\n    this.setState({ json });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 4, offset: 4 }}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"inputGroup-sizing-default\">\n                  Query String\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                aria-label=\"queryString\"\n                aria-describedby=\"inputGroup-sizing-default\"\n                onChange={this.handleChange}\n                value={this.state.queryString}\n              />\n            </InputGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{ span: 4, offset: 4 }}>\n            <Button variant=\"primary\" onClick={this.convertToJSON}>Convert To JSON</Button>\n          </Col>\n        </Row>\n        {!JSON.stringify(this.state.json.length) &&\n        <Row style={{marginTop: \"2%\"}}> \n            <Col md={{ span: 4, offset: 4 }}>\n                <Card>\n                    <Card.Body>{JSON.stringify(this.state.json)}</Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        }\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./MainComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainComponent></MainComponent>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}